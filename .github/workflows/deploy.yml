name: Deploy Church Website

# Trigger workflow on push to main branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Go dependencies
        run: go mod download

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Build Go application
        run: go build -o church-app main.go

  # Deploy to production (only on main branch)
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          go mod download
          cd frontend && npm ci

      - name: Build frontend for production
        run: cd frontend && npm run build

      - name: Build Go application for production (Linux)
        run: GOOS=linux GOARCH=amd64 go build -o church-app main.go

      # Deploy to your server
      - name: Deploy to server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          echo "🚀 Deploying to $DEPLOY_HOST..."

          # Create deployment package
          tar -czf church-app.tar.gz church-app frontend/dist
          echo "📦 Created deployment package"

          # Setup SSH (copy exact working setup from test-deploy.yml)
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "🔑 SSH key configured"
          
          # Debug: Check key format
          echo "🔍 Key length: $(wc -c < ~/.ssh/deploy_key)"
          echo "🔍 Key first 50 chars: $(head -c 50 ~/.ssh/deploy_key)"
          echo "🔍 Key last 50 chars: $(tail -c 50 ~/.ssh/deploy_key)"
          
          # Test SSH connection (exact same as test-deploy.yml)
          echo "🔍 Testing SSH connection to $DEPLOY_USER@$DEPLOY_HOST..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -v $DEPLOY_USER@$DEPLOY_HOST "echo 'SSH connection successful'"

          # Upload package
          echo "📤 Uploading deployment package..."
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no church-app.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/

          # Deploy on server
          echo "🚀 Starting deployment on server..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "mkdir -p $DEPLOY_PATH && cd $DEPLOY_PATH && tar -xzf /tmp/church-app.tar.gz && cp -r frontend/dist/* /var/www/vichetkeo.com/html/ && pkill -f church-app || true && sleep 2 && chmod +x church-app && DATABASE_URL='postgres://church_user:church123@localhost:5432/church_db?sslmode=disable' JWT_SECRET='your-jwt-secret-key-here' GIN_MODE=release nohup ./church-app > church-app.log 2>&1 & sleep 3 && echo 'Deployment completed'"

          echo "🎉 Church website deployed successfully!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "🚀 Church website deployed to production"
          echo "🌐 Visit your website at your domain"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔧 Check the logs above for errors"
