name: Deploy Church Website

# Trigger workflow on push to main branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: church_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Go dependencies
        run: go mod download

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Skip tests (temporarily)
        run: echo "Tests skipped for now - will add them later"

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Build Go application
        run: go build -o church-app main.go

  # Deploy to production (only on main branch)
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          go mod download
          cd frontend && npm ci

      - name: Build frontend for production
        run: cd frontend && npm run build

      - name: Build Go application for production
        run: go build -o church-app main.go

      # Deploy to your server
      - name: Deploy to server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          echo "🚀 Deploying to $DEPLOY_HOST..."
          
          # Create deployment package
          tar -czf church-app.tar.gz church-app frontend/dist
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Upload and deploy
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no church-app.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/
          
          # Deploy on server
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "
            echo '📦 Extracting deployment package...'
            cd $DEPLOY_PATH
            tar -xzf /tmp/church-app.tar.gz
            
            echo '🌐 Setting up web server...'
            # Copy frontend files to web directory
            sudo cp -r frontend/dist/* /var/www/html/
            
            echo '🔧 Starting backend service...'
            # Start the Go application
            nohup ./church-app > church-app.log 2>&1 &
            
            echo '✅ Deployment completed!'
          "
          
          echo "🎉 Church website deployed successfully!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "🚀 Church website deployed to production"
          echo "🌐 Visit your website at your domain"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔧 Check the logs above for errors"
