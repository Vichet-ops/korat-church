name: Deploy

on:
  push:
    branches: [main]

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          echo "VITE_API_URL=https://vichetkeo.com" > .env.production
          npm run build

      - name: Build backend
        run: |
          go mod download
          GOOS=linux GOARCH=amd64 go build -o church-app main.go

      - name: Upload files
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_KEY: ${{ secrets.DROPLET_KEY }}
          DROPLET_PATH: ${{ secrets.DROPLET_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$DROPLET_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key

          # Ensure remote target directories exist and show disk space
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/key $DROPLET_USER@$DROPLET_HOST "mkdir -p $DROPLET_PATH && sudo mkdir -p /var/www/vichetkeo.com/html && df -h || true"

          # Upload files
          scp -v -i ~/.ssh/key -o StrictHostKeyChecking=no -r frontend/dist/* $DROPLET_USER@$DROPLET_HOST:/var/www/vichetkeo.com/html/
          scp -v -i ~/.ssh/key -o StrictHostKeyChecking=no church-app $DROPLET_USER@$DROPLET_HOST:$DROPLET_PATH/
          scp -v -i ~/.ssh/key -o StrictHostKeyChecking=no scripts/setup-production-database.sql $DROPLET_USER@$DROPLET_HOST:$DROPLET_PATH/

          # Setup database
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_HOST "cd $DROPLET_PATH && PGPASSWORD='church123' psql -h localhost -U church_user -d church_db -f setup-production-database.sql"

          # Start backend service
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_HOST "cd $DROPLET_PATH && pkill -f church-app || true && chmod +x church-app && DATABASE_URL='postgres://church_user:church123@localhost:5432/church_db?sslmode=disable' JWT_SECRET='your-jwt-secret-key-here' GIN_MODE=release nohup ./church-app > church-app.log 2>&1 &"

          echo "âœ… Files uploaded and backend started!"

      - name: Restart backend service and verify
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_KEY: ${{ secrets.DROPLET_KEY }}
          DROPLET_PATH: ${{ secrets.DROPLET_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$DROPLET_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_HOST "cd $DROPLET_PATH && pkill -f church-app || true && sleep 2 && chmod +x church-app && export DATABASE_URL='postgres://church_user:church123@localhost:5432/church_db?sslmode=disable' && export JWT_SECRET='your-jwt-secret-key-here' && export GIN_MODE=release && nohup ./church-app > church-app.log 2>&1 & sleep 5 && curl -s http://127.0.0.1:8081/api/health && echo 'Backend is healthy' || (echo 'Backend failed, checking logs:' && tail -20 church-app.log)"

      - name: Restore HTTPS with certbot (non-interactive)
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_KEY: ${{ secrets.DROPLET_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$DROPLET_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_HOST "sudo apt-get update && sudo apt-get install -y certbot python3-certbot-nginx && sudo certbot --nginx -n --agree-tos -m admin@vichetkeo.com -d vichetkeo.com -d www.vichetkeo.com --redirect || true && sudo nginx -t && sudo systemctl reload nginx || sudo service nginx reload"
